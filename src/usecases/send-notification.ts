import { config } from "../config.js";
import { TelegramService } from "../services/telegram.service.js";
import { logger } from "../utils/logger.js";

const log = logger(import.meta);

export class SendNotificationUsecase {
    hasLimitExceededNotified = false;
    
    constructor(
        private telegramService: TelegramService
    ) {}

    public async execute(grossVolume: number, dailyLimit: number, idAccount: string): Promise<void> {
        if (!this.hasLimitExceededNotified) {
        log.warn(`–õ–ò–ú–ò–¢ –í–ü–ï–†–í–´–ï –ü–†–ï–í–´–®–ï–ù! (${grossVolume.toFixed(2)} >= ${dailyLimit}). –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...`);
                        
        const message = `
        üö® *–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç!* üö®

        üë§ **–ê–∫–∫–∞—É–Ω—Ç:** \`${idAccount}\`

        üìâ **–õ–∏–º–∏—Ç:** \`${dailyLimit.toFixed(2)} ${config.app.currency.toUpperCase()}\`
        üìà **–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º:** \`${grossVolume.toFixed(2)} ${config.app.currency.toUpperCase()}\`
        
        ‚úÖ *–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–Ω–≤–æ–π—Å–æ–≤.*
                        `;
        await this.telegramService.sendNotification(message);
        
        this.hasLimitExceededNotified = true;
        } else {
            log.info(`–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è.`);
        }
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–∞–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
     */
    resetNotificationState() {
        this.hasLimitExceededNotified = false;
        log.info('–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ —Å–±—Ä–æ—à–µ–Ω–æ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å.');
    }}